syntax = "proto3";

package offersrpc;

option go_package = "github.com/carlakc/boltnd/offersrpc";

service Offers {
    rpc SendOnionMessage (SendOnionMessageRequest)
        returns (SendOnionMessageResponse);

    rpc DecodeOffer (DecodeOfferRequest) returns (DecodeOfferResponse);

    rpc SubscribeOnionPayload (SubscribeOnionPayloadRequest)
        returns (stream SubscribeOnionPayloadResponse);

    rpc GenerateBlindedRoute (GenerateBlindedRouteRequest)
        returns (GenerateBlindedRouteResponse);
}

message SendOnionMessageRequest {
    // The pubkey of the peer to send the message to. As currently implemented
    // the server will make an ad-hoc connection to the peer (if not already
    // connected) to deliver the message.
    //
    // NB: This will reveal your IP address if you are not running tor. In
    // future iterations this API will find a route to the peer and send the
    // message along a blinded path, protecting sender identity.
    bytes pubkey = 1;

    // A map of TLV type to encoded value to deliver to the target node. Note
    // that the bytes for each payload will be written directly, so should
    // already be encoded as the recipient is expecting. TLVs >= 64 are
    // reserved for the final hop, so all values in the map must be in this
    // in this range.
    map<uint64, bytes> final_payloads = 2;

    // An optional blinded path that can be used to supply the recipient with
    // a path to send replies over.
    BlindedPath reply_path = 3;

    // If we cannot find a path to the node pubkey provided, there is an option
    // to make a direct p2p connection to the node to deliver onion messages.
    // This option will leak the IP of your LND node, so it is opt-in.
    bool direct_connect = 4;
}

message BlindedPath {
    // The un-blinded pubkey of the introduction node for the blinded path.
    bytes introduction_node = 1;

    // The encrypted data for the introduction node.
    bytes introduction_encrypted_data = 2;

    // The blinding point is the ephemeral key used to blind the blinded hops
    // in the route.
    bytes blinding_point = 3;

    // A set of blinded hops following the introduction point.
    repeated BlindedHop hops = 4;
}

message BlindedHop {
    // The blinded node pubkey for the hop.
    bytes blinded_node_id = 1;

    // The encrypted data blob for the hop.
    bytes encrypted_data = 2;
}

message SendOnionMessageResponse {
}

message DecodeOfferRequest {
    // The encoded offer string to be decoded.
    string offer = 1;
}

message DecodeOfferResponse {
    // The decoded offer.
    Offer offer = 1;
}

message Offer {
    // Minimum amount is the minimum payment amount that the offer is for,
    // expressed in millisatoshis.
    uint64 min_amount_msat = 1;

    // The description of what the offer is for.
    string description = 2;

    // The BOLT feature vector for the offers, encoded as a bit vector.
    bytes features = 3;

    // The expiry time for the offer, expressed as seconds from the unix epoch.
    uint64 expiry_unix_seconds = 4;

    // The issuer of the offer.
    string issuer = 5;

    // The minimum number of items for the offer.
    uint64 min_quantity = 6;

    // The maximum number of items for the offer.
    uint64 max_quantity = 7;

    // The hex-encoded node ID of the party making the offer, expressed in
    // x-only format.
    string node_id = 8;

    // The 64 byte bip340 hex-encoded signature for the offer, generated using
    // node_id's corresponding private key.
    string signature = 9;
}

message SubscribeOnionPayloadRequest {
    // Onion messages reserve tlv values 64 and above for message intended for
    // the final node. These tlv records are considered "sub-namespaces", which
    // themselves carry a tlv stream for the end application. The tlv type
    // provided here will register a subscription for any onion messages that
    // are delivered to our node that populate the tlv type specified.
    uint64 tlv_type = 1;
}

message SubscribeOnionPayloadResponse {
    // Value is the raw bytes extracted from the tlv type that the subscription
    // is for.
    bytes value = 1;

    // Reply path is an optional reply path included by the sender to receive
    // responses to this onion message on.
    BlindedPath reply_path = 2;
}

message GenerateBlindedRouteRequest {
    // The set of protocol features that the nodes along the route should have.
    repeated uint64 features = 1;
}

message GenerateBlindedRouteResponse {
    // A blinded route to our node.
    BlindedPath route = 1;
}
